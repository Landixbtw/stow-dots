;; Enable Transient Mark Mode
(transient-mark-mode 1)

;;;; Org Mode Configuration

;; General Org Mode setup
(require 'org)
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)" "IN-PROGRESS")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))

(setq-default org-enforce-todo-dependencies t)
(setq org-todo-keyword-faces
      '(("TODO" . (:foreground "red" :weight bold))
        ("NEXT" . (:foreground "blue" :weight bold))
        ("DONE" . (:foreground "forest green" :weight bold))
        ("WAITING" . (:foreground "orange" :weight bold))
        ("HOLD" . (:foreground "magenta" :weight bold))
        ("CANCELLED" . (:foreground "forest green" :weight bold))
        ("MEETING" . (:foreground "forest green" :weight bold))
        ("PHONE" . (:foreground "forest green" :weight bold))))

;; Don't export TODO keywords by default
(setq-default org-export-with-todo-keywords nil)

;; Org SuperStar Configuration
(use-package org-superstar
  :ensure t
  :hook (org-mode . org-superstar-mode)
  :config
  (setq org-superstar-item-bullet-alist
        '((?* . ?•)
          (?+ . ?➤)
          (?- . ?•)))
  (setq org-superstar-headline-bullets-list '(?\d))
  (setq org-superstar-special-todo-items t)
  (setq org-superstar-remove-leading-stars t)
  (setq org-hide-leading-stars t)
  (setq org-superstar-todo-bullet-alist
        '(("TODO" . ?☐)
          ("NEXT" . ?✒)
          ("HOLD" . ?✰)
          ("WAITING" . ?☕)
          ("CANCELLED" . ?✘)
          ("DONE" . ?✔)))
  (org-superstar-restart))

(setq org-ellipsis " ▼ ")
(setq org-hide-emphasis-markers t)

;;;; Org Faces Customization (Consolidated)

(defun my/customize-org-faces ()
  "Custom faces for Org-mode."
  (interactive) ; Make it callable with M-x
  (setq line-spacing 0.1
        org-pretty-entities t
        org-startup-indented t
        org-adapt-indentation nil)

  (variable-pitch-mode +1)

  ;; Fixed-pitch elements
  (mapc (lambda (face) (set-face-attribute face nil :inherit 'fixed-pitch))
        '(org-block org-table org-verbatim org-block-begin-line
                   org-block-end-line org-meta-line org-date
                   org-drawer org-property-value org-special-keyword
                   org-document-info-keyword))

  ;; Elements with reduced height
  (mapc (lambda (face) (set-face-attribute face nil :height 0.8))
        '(org-document-info-keyword org-block-begin-line
          org-block-end-line org-meta-line org-drawer
          org-property-value org-date))

  ;; Headline levels
  (set-face-attribute 'org-level-1 nil :height 1.25 :foreground "#BEA4DB")
  (set-face-attribute 'org-level-2 nil :height 1.15 :foreground "#A382FF" :slant 'italic)
  (set-face-attribute 'org-level-3 nil :height 1.1 :foreground "#5E65CC" :slant 'italic)
  (set-face-attribute 'org-level-4 nil :height 1.05 :foreground "#ABABFF")
  (set-face-attribute 'org-level-5 nil :foreground "#2843FB")

  ;; Other elements
  (set-face-attribute 'org-document-title nil :foreground "DarkOrange3" :height 1.3)
  (set-face-attribute 'org-ellipsis nil :foreground "#4f747a" :underline nil)
  (set-face-attribute 'variable-pitch nil :family "Roboto Slab" :height 1.2))

(add-hook 'org-mode-hook 'my/customize-org-faces)

;;;; Org Agenda Configuration

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-block-separator #x2501
      org-agenda-compact-blocks t
      org-agenda-start-with-log-mode t)

(setq org-agenda-format-date (lambda (date)
                                (concat "\n" (make-string (window-width) 9472)
                                        "\n"
                                        (org-agenda-format-date-aligned date))))

(setq org-agenda-breadcrumbs-separator " ❱ "
      org-agenda-current-time-string "⏰ ┈┈┈┈┈┈┈┈┈┈┈ now"
      org-agenda-time-grid '((weekly today require-timed)
                             (800 1000 1200 1400 1600 1800 2000)
                             "---" "┈┈┈┈┈┈┈┈┈┈┈┈┈")
      org-agenda-prefix-format '((agenda . "%i %-12:c%?-12t%b% s")
                                 (todo . " %i %-12:c")
                                 (tags . " %i %-12:c")
                                 (search . " %i %-12:c")))

(setq org-agenda-category-icon-alist
      `(("Work" ,(list (all-the-icons-faicon "cogs")) nil nil :ascent center)
        ("Personal" ,(list (all-the-icons-material "person")) nil nil :ascent center)
        ("Calendar" ,(list (all-the-icons-faicon "calendar")) nil nil :ascent center)
        ("Reading" ,(list (all-the-icons-faicon "book")) nil nil :ascent center)))

;; Example of setting agenda files. Adapt to your directory/file structure
(setq org-agenda-files '("~/org/tasks.org" "~/org/projects.org" "~/org/ideas.org"))

(setq org-agenda-custom-commands
      '(("d" "Daily Agenda"
         ((agenda nil "SCHEDULED: today" )
          (todo "NEXT" ((org-agenda-overriding-header "Next Actions")))))
        ("w" "Work Agenda"
         ((agenda nil "SCHEDULED: today" ((org-agenda-files '("~/org/work.org"))))
          (todo "NEXT" ((org-agenda-files '("~/org/work.org"))
                        (org-agenda-overriding-header "Work Next Actions")))))
        ("p" "Personal Agenda"
         ((agenda nil "SCHEDULED: today" ((org-agenda-files '("~/org/personal.org"))))
          (todo "NEXT" ((org-agenda-files '("~/org/personal.org"))
                        (org-agenda-overriding-header "Personal Next Actions")))))
        ("z" "Hugo Org")))

;;;; Org Icalendar Settings

(setq org-icalendar-include-todo t)

(setq org-combined-agenda-icalendar-file "~/org/calendar.ics")
(setq org-icalendar-combined-name "Hugo Org")
(setq org-icalendar-use-scheduled '(todo-start event-if-todo event-if-not-todo))
(setq org-icalendar-use-deadline '(todo-due event-if-todo event-if-not-todo))
(setq org-icalendar-timezone "Europe/Paris")
(setq org-icalendar-store-UID t)
(setq org-icalendar-alarm-time 30)

;;;; Capture Template Example (Highly Recommended)
(setq org-capture-templates
      '(("t" "Todo" entry (file "~/org/tasks.org")
         "* TODO %?\n  %i\n  %a" :empty-lines-after 1)
        ("j" "Journal Entry" entry (file+datetree "~/org/journal.org")
         "* %U %?\n  %i\n  %a" :empty-lines-after 1)))
